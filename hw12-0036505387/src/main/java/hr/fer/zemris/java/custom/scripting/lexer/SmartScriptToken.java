package hr.fer.zemris.java.custom.scripting.lexer;

import java.util.Objects;

/**
 * Represents a single token generated by {@link SmartScriptLexer} while tokenising
 * the text.
 *
 * @author Marko LazariÄ‡
 *
 */
public class SmartScriptToken {

	/**
	 * The type of the token.
	 *
	 * @see SmartScriptTokenType
	 */
	private final SmartScriptTokenType type;

	/**
	 * The value of the token.
	 */
	private final Object value;

	/**
	 * Constructs a new token with the given type and value.
	 *
	 * @param type the type of the token
	 * @param value the value of the token
	 *
	 * @throws NullPointerException if {@code type} is {@code null}
	 */
	public SmartScriptToken(SmartScriptTokenType type, Object value) {
		this.type = Objects.requireNonNull(type, "Type of token cannot be null.");
		this.value = value;
	}

	/**
	 * Returns the type of the token.
	 *
	 * @return the type of the token
	 */
	public SmartScriptTokenType getType() {
		return type;
	}

	/**
	 * Returns the value of the token.
	 *
	 * @return the value of the token
	 */
	public Object getValue() {
		return value;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return Objects.hash(type, value);
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof SmartScriptToken)) {
			return false;
		}

		SmartScriptToken other = (SmartScriptToken) obj;

		return type == other.type && Objects.equals(value, other.value);
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "SmartScriptToken [type=" + type + ", value=" + value + "]";
	}

}
