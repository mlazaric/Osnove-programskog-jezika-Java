package hr.fer.zemris.java.custom.scripting.nodes;


import java.util.Objects;

import hr.fer.zemris.java.custom.scripting.elems.Element;
import hr.fer.zemris.java.custom.scripting.elems.ElementVariable;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;

/**
 * A node representing a for loop tag ("{$ FOR") in the syntax tree generated by {@link SmartScriptParser}.
 *
 * @author Marko LazariÄ‡
 *
 */
public class ForLoopNode extends Node {

	/**
	 * The variable to loop over.
	 */
	private final ElementVariable variable;

	/**
	 * The start expression of the for loop.
	 */
	private final Element startExpression;

	/**
	 * The end expression of the for loop.
	 */
	private final Element endExpression;

	/**
	 * The optional step expression of the for loop.
	 */
	private final Element stepExpression;

	/**
	 * Creates a new {@link ForLoopNode} with the given arguments.
	 *
	 * @param variable the variable to loop over
	 * @param startExpression the start expression of the for loop
	 * @param endExpression the end expression of the for loop
	 * @param stepExpression the optional step expression of the for loop
	 *
	 * @throws NullPointerException if {@code variable}, {@code startExpression} or {@code endExpression}
	 *                              is {@code null}
	 */
	public ForLoopNode(ElementVariable variable, Element startExpression, Element endExpression,
			Element stepExpression) {
		this.variable = Objects.requireNonNull(variable, "Variable of a for loop cannot be null.");
		this.startExpression = Objects.requireNonNull(startExpression, "Start expression of a for loop cannot be null.");
		this.endExpression = Objects.requireNonNull(endExpression, "End expression of a for loop cannot be null.");
		this.stepExpression = stepExpression;
	}

	/**
	 * Returns the variable of the for loop.
	 *
	 * @return the variable of the for loop
	 */
	public ElementVariable getVariable() {
		return variable;
	}

	/**
	 * Returns the start expression of the for loop.
	 *
	 * @return the start expression of the for loop
	 */
	public Element getStartExpression() {
		return startExpression;
	}

	/**
	 * Returns the end expression of the for loop.
	 *
	 * @return the end expression of the for loop
	 */
	public Element getEndExpression() {
		return endExpression;
	}

	/**
	 * Returns the step expression of the for loop.
	 *
	 * @return the step expression of the for loop
	 */
	public Element getStepExpression() {
		return stepExpression;
	}

	/* (non-Javadoc)
	 * @see hr.fer.zemris.java.custom.scripting.nodes.Node#toString()
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();

		sb.append("{$ FOR ")
		.append(variable.toString())
		.append(' ')
		.append(startExpression.toString())
		.append(' ')
		.append(endExpression.toString());

		if (stepExpression != null) {
			sb.append(' ').append(stepExpression.toString());
		}

		sb.append(" $}");

		sb.append(super.toString());

		sb.append("{$END$}");

		return sb.toString();
	}

	/* (non-Javadoc)
	 * @see hr.fer.zemris.java.custom.scripting.nodes.Node#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();

		result = prime * result + Objects.hash(endExpression, startExpression, stepExpression, variable);

		return result;
	}

	/* (non-Javadoc)
	 * @see hr.fer.zemris.java.custom.scripting.nodes.Node#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (!(obj instanceof ForLoopNode)) {
			return false;
		}

		ForLoopNode other = (ForLoopNode) obj;

		return Objects.equals(endExpression, other.endExpression)
				&& Objects.equals(startExpression, other.startExpression)
				&& Objects.equals(stepExpression, other.stepExpression)
				&& Objects.equals(variable, other.variable);
	}

}
